name: Packages

on:
  workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout RiV-mesh-builds repository
        uses: actions/checkout@v4
        with:
          repository: 'RiV-chain/RiV-mesh-builds'
          submodules: 'recursive'
          path: 'RiV-mesh-builds'
          fetch-depth: 0

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_TOKEN }}

      - name: Build and push Y6-Link image
        uses: docker/build-push-action@v5
        with:
          context: RiV-mesh-builds
          file: RiV-mesh-builds/contrib/docker/Dockerfile
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKER_HUB_USERNAME }}/y6-link:latest
            ${{ secrets.DOCKER_HUB_USERNAME }}/y6-link:${{ github.sha }}
          labels: |
            org.opencontainers.image.source=https://github.com/RiV-chain/RiV-mesh-builds

  build-packages-debian:
    strategy:
      fail-fast: false
      matrix:
        pkgarch: ["amd64", "i386", "arm64"]

    name: Package (Debian, ${{ matrix.pkgarch }})

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      
      - name: Prepare dependencies
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest

      - name: Build package
        env:
          PKGARCH: ${{ matrix.pkgarch }}
        run: |
          PKGARCH=${{ matrix.pkgarch }} sh ./contrib/deb/generate.sh
          PKGARCH=${{ matrix.pkgarch }} sh ./contrib/deb/generate-vpn.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Debian package (${{ matrix.pkgarch }})
          path: "*.deb"
          if-no-files-found: error

  build-packages-debian-ui:
    strategy:
      fail-fast: false
      matrix:
        pkgarch: ["amd64"]

    name: Package UI (Debian, ${{ matrix.pkgarch }})

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Install dependencies
        uses: awalsh128/cache-apt-pkgs-action@latest
        with:
          packages: gtk+-3.0 webkit2gtk-4.0 imagemagick-6.q16 libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          version: 1.0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      
      - uses: dtolnay/rust-toolchain@stable 
      
      - name: Prepare dependencies
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          cargo install tauri-cli

      - name: Build package
        env:
          PKGARCH: ${{ matrix.pkgarch }}
        run: |
          PKGARCH=${{ matrix.pkgarch }} sh ./contrib/deb/generate-gui.sh
          PKGARCH=${{ matrix.pkgarch }} sh ./contrib/deb/generate-vpn-gui.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Debian package UI (${{ matrix.pkgarch }})
          path: "*.deb"
          if-no-files-found: error

  build-packages-macos:
    strategy:
      fail-fast: false
      matrix:
        pkgarch: ["amd64", "arm64"]

    name: Package (macOS, ${{ matrix.pkgarch }})

    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      
      - uses: dtolnay/rust-toolchain@stable 

      - name: Prepare dependencies
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          rustup target add x86_64-apple-darwin
          rustup target add aarch64-apple-darwin
          cargo install tauri-cli

      - name: Build package
        env:
          PKGARCH: ${{ matrix.pkgarch }}
        run: |
          PKGARCH=${{ matrix.pkgarch }} sh contrib/macos/create-pkg.sh
          PKGARCH=${{ matrix.pkgarch }} sh contrib/macos/create-pkg-gui.sh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: macOS package (${{ matrix.pkgarch }})
          path: "*.pkg"
          if-no-files-found: error

  build-packages-windows:
    strategy:
      fail-fast: false
      matrix:
        pkgarch: ["x64", "x86", "arm64"]

    name: Package (Windows, ${{ matrix.pkgarch }})

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "stable"
      
      - uses: dtolnay/rust-toolchain@stable 

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4

      - name: Prepare dependencies
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          go install github.com/tc-hib/go-winres@latest
          rustup target add aarch64-pc-windows-msvc
          cargo install tauri-cli

      - name: Build package
        run: |
          sh ./contrib/msi/build-msi.sh ${{ matrix.pkgarch }}
          sh ./contrib/msi/build-msi-gui.sh ${{ matrix.pkgarch }}
          sh ./contrib/msi/build-vpn-msi.sh ${{ matrix.pkgarch }}
          sh ./contrib/msi/build-vpn-msi-gui.sh ${{ matrix.pkgarch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows package (${{ matrix.pkgarch }})
          path: "*.msi"
          if-no-files-found: error

  build-packages-windows-7:
    strategy:
      fail-fast: false
      matrix:
        pkgarch: ["x64", "x86", "arm64"]

    name: Package (Windows7, ${{ matrix.pkgarch }})

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: 'true'

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          # Windows 7 compatibility
          go-version: "1.20.12"
      
      - uses: dtolnay/rust-toolchain@stable 

      - name: Setup .NET Core SDK
        uses: actions/setup-dotnet@v4

      - name: Prepare dependencies
        run: |
          go install github.com/swaggo/swag/cmd/swag@latest
          go install github.com/tc-hib/go-winres@latest
          rustup target add aarch64-pc-windows-msvc
          cargo install tauri-cli

      - name: Build package
        run: |
          sh ./contrib/msi/build-msi-ie.sh ${{ matrix.pkgarch }}
          sh ./contrib/msi/build-vpn-msi-ie.sh ${{ matrix.pkgarch }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: Windows7 package (${{ matrix.pkgarch }})
          path: "*.msi"
          if-no-files-found: error
